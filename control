#!/usr/bin/perl -w
use strict;
use IPC::Open2;
use Fcntl;
use Symbol 'gensym'; # vivify a separate handle for STDERR
use File::Spec;

# Communication with other programmes.  `mod_host` handles LV2
# effects.  `griode` runs the Launchpad X controller.
my $mod_host_port = 5555;
my $griode_port = 8887;


# The history file keeps track of what changes this has made to jack
# and mod-host that have to be undone next run
my $pwd = `pwd`;
chomp $pwd;
my $history_fn = $pwd.'/.history';
-e $history_fn or `touch $history_fn`;
-r $history_fn or die "$!: Cannot read $history_fn ";
-w $history_fn or die "$!: Cannot read $history_fn ";


sub mod_host( $ ){
    my $cmds = shift or die;
    my @cmds = @$cmds;

    my $pid =
	open2(my $child_out, my $child_in, "/usr/bin/nc localhost $mod_host_port");
    defined $pid or die "$!: Fork failed";

    foreach my $cmd (@cmds){
	my $cmd_str = "$cmd->[1]";
	print "mod-host: $cmd_str\n";
	print $child_in "$cmd_str\n";

	my $result = '';
	while(1){
	    my $res = '';
	    read($child_out, $res, 1);

	    if($res eq "\n"){
		last;
	    }
	    if(ord($res) == 0){
		last;
	    }
	    $result .=  $res;
	    # FIXME  Process $res for errors
	}
	if($result =~ /resp ([\-0-9]+)/){
	    if($1 < 0){
		warn ">> $result";
	    }
	}else{
	    warn "ERROR: $cmd_str -- '$result'\n";
	}
    }
    kill 'HUP' , $pid;
}    

sub write_history( @ ) {
    # warn "Write history to: $history_fn ";
    open(my $out, ">>$history_fn") or die $!;
    foreach my $l (@_) {
	print $out "$l\n";
    }
}

sub consume_stdin() {
    my $offset = 0;
    my $buffer;
    while(read(STDIN,  $buffer, 1, $offset++)){};
    return split(/\n/, $buffer);
}


#--------------------------------------------------------
#--------------------------------------------------------
#--------------------------------------------------------
# Set up the parameters of a instrument.  Set up LV2 effects, JACK
# connections, and GRIODE parameters

# A file of commands is prepared and the file name passed to this
# programme




# The mod-host works having a set of "effects".  Each one is added
# with the command:

# add <URL> <N>

# The <URL> identifies the effect (the command lv2ls lists all the
# URLs of installed LV2 effects).

# <N> is a unique number.  The Jack inputs/outputs are
# `effect_N:input`/`effect_N:output`

# When a valid `add` command in received a record is created by adding
# a line: "<N> <URL>\n"

# When a parameter is using command `param_set` a line is added `<N>
# <param_name,value>...<param_name,value>`

# On startup the parameters are read into a hash keyed by N, value is
# a HASHREF.  One enty is `url => <URL>`.  Each parameter uses the
# parameter name as a key and the value is a array of values. (are
# they allways numbers?)

#


my @stdin;
if(scalar(@ARGV) == 0){
    # No argument.  Read stdin
    
    @stdin = consume_stdin();
}elsif(scalar(@ARGV) == 1){
    # One arg, a path
    open(my $in, $ARGV[0]) or die "$!: $ARGV[0]";
    @stdin = <$in>;
}
#print join("\n", @stdin)."\n---\n";


# Place tostore commands before being executed.
my @griode = ();
my @modhost = ();
my @jack = ();


# Commands on comand line.
# `mh`  a mod host parameter to set
# Else a file name that holds commannds to initialise a instrument

foreach my $line (@stdin){
    $line =~ /\S/ or next;
    $line =~ /^\s*\#/ and next;
    chomp $line;
    
    $line =~ /^(\S+)\s?(.*)?/ or die $line;
    my $arg1 = $1;
    my $args = defined($2) ? $2 : "";
    
    if($arg1 eq 'griode'){
	# Send a command to griode
	push(@griode, $args);
    }elsif($arg1 eq 'mh'){
	# Could be a `add` instruction to create a mod-host efect or
	# `param_set` to set parameters
	if($args =~ /^\s*(add)\s+.+$/){
	    push(@modhost, ["add", $args]);
	}elsif($args =~ /^\s*param_set\s/){
	    # print "\$args $args\n";
	    push(@modhost, ["param_set", $args]);
	}elsif($args =~ /^\s*remove\s/){
	    push(@modhost, ["remove", $args]);
	}
    }elsif($arg1 eq 'jack'){
	push(@jack, $args);
    }elsif($arg1 eq 'clear'){
	# If there is no history there is nothing to clear
	my $s = -s $history_fn;
	# if($s == 0){
	#     next;
	# }
	if($s > 0){
	    # Read history and undo commands run earlier and undo them
	    my @history = `cat $history_fn`;

	    my %jack_hist = ();
	    my %modh_hist = ();

	    foreach my $cmd (@history) {
		# warn "\$cmd $cmd";
		# jack and mod-host commands are the only ones we need to undo
		if($cmd =~ /^jack\s(\S+ \S+)\s*$/){
		    $jack_hist{$1} = $1;
		}elsif($cmd =~ /add\s\S+\s+(\d+)\s*$/){
		    $modh_hist{$1} = $1;
		}	    
	    }
	    map {`jack_disconnect $_`} keys %jack_hist;
	    map{  mod_host([["remove", "remove $_"]])} keys %modh_hist;
	    # warn "Deleted history\n";

	    unlink $history_fn;
	}
    }else{
	die $arg1;
    }
}

if(@griode){
    #warn "Griode commands: ".scalar(@griode)." \n";    
    open(my $out_fh, "|-", "/usr/bin/nc localhost $griode_port")
	or die $!;
    map {print $out_fh "$_\n"} @griode;
    close $out_fh or die $!;
    write_history(map{'griode '.$_} @griode);
}
if(@modhost){
    # print "mod-host\n";
    my $start  = time();
    mod_host(\@modhost);
    # print "mod-host: ".(time() - $start) . " seconds\n";
    write_history(map{'mod-host '. join(' ', @$_)} @modhost);
}
if(@jack){
    # warn "jack\n";
    map{`jack_connect $_`} @jack;
    write_history(map{'jack '.$_} @jack);
}

