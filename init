#!/bin/perl -w
use strict;
my $ROOT =  "/home/patch/Musical-Instrument";

my $GRIODE_PID_FILE = "$ROOT/.griode.pid";
my $FE_PID_FILE = "$ROOT/.griode.pid";
my $WS_PID_FILE = "$ROOT/.griode.pid";
my $LV2_PATH = "$ROOT/lv2/plugins";

## Logging levels: DEBUG, INFO, WARNING, ERROR, and CRITICAL
my $GRIODE_CMD = 'LOG_LEVEL=INFO GRIODE_AUDIO_DRIVER=jack' .
    " $ROOT/griode.py 2>&1 > /tmp/griode.log";

# mod-host runs lv2 plugins
my $MOD_HOST_EXE='/home/patch/mod-host/bin/mod-host';
-e $MOD_HOST_EXE or die $!;
my $mod_host_cmd = "LV2_PATH=$LV2_PATH $MOD_HOST_EXE";

my  $mod_host_running = grep{/$MOD_HOST_EXE/} `ps xww`;
if(!$mod_host_running){
    # Need to start mod-host
    
    print "Run: $mod_host_cmd\n";

    my $p = fork();
    if($p == 0) {
	# Child
	`$mod_host_cmd`;
	exit;
    }else{
	print "Started mod-host\n";
    }
}else{
    print "mod-host already running\n";
}

# Check if jack running
my $res =`jack_wait -c 2>/dev/null`;
chomp $res;
$res eq "running" or die "Jack is not running\n";
print "jack running\n";

# Check griode is running
my $running = 0;
if(-e  $GRIODE_PID_FILE){
    my $pid = `cat $GRIODE_PID_FILE`;
    $running = grep{/^$pid\s/} `ps x`;
}

## If it is not running, start it
if(!$running){
    my $pid = fork();
    defined($pid) or die "$!: Cannot fork";
    if($pid == 0){
	# Child
	exec "$GRIODE_CMD" or die "$!: Could not exec";
    }else{
	print "Ran $GRIODE_CMD\n";
    }
}else{
    print "Griode running: Do not start it\n";
}

sub run_fe {

    # Run the front end.  A web app using websockets.  SO need http
    # server and web socket server
    
    my $ws_server = "cargo run --bin server --features server   ";
    my $fe_server = "simple-http-server";

    my $pid = `cat $FE_PID_FILE`;
    chomp $pid;
    unless($pid  &&
	   `ps x | grep $pid | grep -v grep`){
	# Front end has not started
	my $fe_pid = fork();
	if($fe_pid == 0) {
	    # child
	    chdir 'frontend' ;
	    exec $ws_server or die "$!: Cannot exec $ws_server";
	}else{
	    `echo $fe_pid > $FE_PID_FILE`;
	}
    }

    $pid = `cat $WS_PID_FILE`;
    chomp $pid;
    unless($pid &&
	   `ps x | grep $pid | grep -v grep`){
	# Web socket server has has not started
	my $ws_pid = fork();
	if($ws_pid == 0) {
	    # child
	    chdir "frontend";
	    exec $ws_server or die "$!: Could not exec: $ws_server";
	    exit;
	}else{
	    `echo $ws_pid > $WS_PID_FILE`;
	}
    }
}

&run_fe;
wait;

# Clean up
#unlink($cmdPipe);





