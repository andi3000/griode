#!/bin/perl -w
use strict;
my $ROOT =  $ENV{PATH_MI_ROOT};
-d $ROOT or die "'$ROOT' is not a directory:";
my $LV2_PATH = "$ROOT/lv2/plugins";

my $GRIODE_PID_FILE = "$ROOT/.griode.pid";
my $FE_PID_FILE = "$ROOT/.griode.pid";
my $WS_PID_FILE = "$ROOT/.griode.pid";

## Logging levels: DEBUG, INFO, WARNING, ERROR, and CRITICAL
my $GRIODE_CMD = "LOG_LEVEL=INFO GRIODE_AUDIO_DRIVER=jack $ROOT/griode.py 2>&1 > /tmp/griode.log";

# mod-host runs lv2 plugins
my $mod_host_name = "mod-host"; # Search for this in process tree
my $MOD_HOST_EXE="/home/patch/mod-host/bin/$mod_host_name";
-e $MOD_HOST_EXE or die $!;
my $mod_host_cmd = "LV2_PATH=$LV2_PATH $MOD_HOST_EXE -f 5556 -p 5555";

if(grep{/target\/release\/server/} `ps axww`){
    ## Alredy running web socket server
    exit;
}

sub run_daemon( $$ ) {
    my ($dir, $cmd) = @_;

    my $p = fork();
    if($p == 0) {
	# Child
	chdir($dir) or die "$!: '$dir'";
	`$cmd`;
	exit;
    }else{
	print "> started $p: $cmd\n";
    }
    return $p;
}    

my  $sys_mod_host_running = grep{/$mod_host_name/} `ps xwwa`;
if(!$sys_mod_host_running){
    # Need to start mod-host
    &run_daemon($ROOT, $mod_host_cmd);
}else{
    print "> mod-host already running\n";
}

# Check if jack running
my $res =`jack_wait -c 2>/dev/null`;
chomp $res;
$res eq "running" or die "Jack is not running\n";
print "> jack running\n";

# Check griode is running
my $running = 0;
if(-e  $GRIODE_PID_FILE){
    my $pid = `cat $GRIODE_PID_FILE`;
    $running = grep{/^$pid\s/} `ps x`;
}

## If it is not running, start it
if(!$running){
    &run_daemon($ROOT, $GRIODE_CMD);
}else{
    print "> griode already running\n";
}

# Make sure front end server running that gets requests for the wassm
# front end
my $fe_running = grep{/simple-http-server/} `ps axww`;
if(!$fe_running){
    &run_daemon("$ROOT/frontend", "simple-http-server");
}else{
    print "> Not starting http server.  Already running \n";
}

## lastly block on the server so it can get the stdin
my $ws_server_running = grep{/target\/release\/server/} `ps axww`;
if(!$ws_server_running){
    chdir "$ROOT/frontend" or die $!;
    exec("cargo run --bin server --features server --release");
    die "At the end...";
}else{
    print "> Not starting ws server.  Already running \n";
}

# wait for children to all finish
wait;

# Clean up
#unlink($cmdPipe);





