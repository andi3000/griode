#!/usr/bin/perl -w
use strict;
use warnings;

# The file name o fthe resulting JSON file
my $db_filename = "lv2.json";

open(my $out, ">$db_filename") or die "$!: $db_filename";
print $out "[\n";

## Load all LV2 plugins installed.  `find_lv2` searches the computer
## file system for LV2 directories and puts links to them all in
## lv2/plugins
my $path = $0;
$path =~ s/\/[^\/]+$//;
$path .= "/plugins";

# Lists all the plugins on the path:  LV2_PATH
my @lv2_urls = map {chomp; $_} `LV2_PATH=$path lv2ls`;

foreach my $url (@lv2_urls){

    # For each discovered URL use `lvinfo` to get all the information about each plugin
    my @info = `LV2_PATH=$path lv2info $url`;

    my $name;
    my $class;

    my $state = "start";

    my %port_data = ();
    my $port;

    foreach my $l (@info){

	chomp $l;
	
	if($l =~ /^http:/){
	    $l eq $url or die "$l ne $url";
	    next;
	}

	if($state eq 'start' and $l =~ /^\s+UIs:\s*$/){
	    $state = 'UI';
	    next;
	}
	if($state eq 'UI' and $l =~ /^\s+Data\s+URIs:\s+/){
	    $state = 'start';
	    next;
	}
	if($state eq 'UI' and $l =~ /^\s+Port \d+:\s*$/){
	    die $l;
	}
	if($state eq "start" and $l =~ /^\s+Name:\s+(.+)\s*$/){
	    $name = $1;
	    next;
	}elsif($state eq "start" and $l =~ /^\s+Class:\s+(.+)\s*$/){
	    # Getting the class of a plugin is fraught.  About half
	    # do not have a useful class,
	    my $c = $1;
	    if($c =~ /plug.in/){
		# Generic class with no information
		if(defined $name){
		    $c = $name;
		}
	    }
	    $class = $c;
	    next;
	}elsif($l =~ /^\s+Port\s+(\d+):\s*$/){
	    $port = $1;
	    $state = "port";
	    defined($port_data{$port}) or $port_data{$port} = {}; 
	    next;
	}elsif($state eq 'port'){
	    if($l =~ /^\s+Type:\s+http:.+\#(.+)\s*$/){
		$port_data{$port}->{Type} = $1;
		next;
	    }elsif($l =~ /^\s+Symbol:\s+(\S+)\s*$/){
		$port_data{$port}->{Symbol} = $1;
		next;
	    }elsif($l =~ /^\s+Name:\s+(.+)\s*$/){
		$port_data{$port}->{Name} = $1;
		next;
	    }elsif($l =~ /^\s+Scale Points:\s*$/){
		$state = 'scale points';
		$port_data{$port}->{scale_points} = {};
		next;
	    }elsif($l =~ /^\s+Minimum:\s+([0-9\.]+)\s*$/){
		$port_data{$port}->{minimum} = $1;
	    }elsif($l =~ /^\s+Maximum:\s+([0-9\.]+)\s*$/){
		$port_data{$port}->{maximum} = $1;
	    }elsif($l =~ /^\s+Default:\s+([0-9\.]+)\s*$/){
		$port_data{$port}->{default} = $1;
	    }
	}elsif($state eq 'scale points'){
	    if($l =~ /^\s*$/){
		$state = 'port';
		next;
	    }elsif($l =~ /^\s+([\d\.]+)\s+=\s+\"([^\"]+)\"\s*$/){
		$port_data{$port}->{scale_points}->{$1} = $2;
		next;
	    }
	}
    }

    if(!defined($name)){
	# Deduce name from URL
	warn "No name for $url\n";
	$url =~ /\/([^\/]+)$/ or die $url;
	$name = $1;
    }
    unless(defined($name) and
	   defined($class)){
	print "$url\n";
	print "name: ";
	print defined($name) ? $name : "<undef>";
	print "\nclass: ";
	print defined($class) ? $class : "<undef>";
	print "\n";
	next;	
    }
    foreach my $n (keys %port_data){
	defined $port_data{$n}->{Name} or
	    die "$port $url Name";
	defined $port_data{$n}->{Type} or
	    die "$port $url Type";
	defined $port_data{$n}->{Symbol} or
	    die "$port $url Symbol";
    }
    # Write a record
    print $out  "{\n".'  "url":"'.$url.'",'."\n".'  "class":"'.$class.'",'."\n".'  "name":"'.$name.'",'."\n";
    print $out '  "Ports":['."\n"; 
    my $ports = "";
    foreach my $port (sort {$a <=> $b} keys %port_data){
	$ports .= "    {\n";
	$ports .= '      "Port":'.$port.",\n";
	$ports .= '      "Name":"'.$port_data{$port}->{Name}.'"'.",\n";
	$ports .= '      "Type":"'.$port_data{$port}->{Type}.'"'.",\n";
	$ports .= '      "Symbol":"'.$port_data{$port}->{Symbol}.'"'."\n";
	if(defined($port_data{$port}->{scale_points})){
	    foreach my $sp (sort {$a <=> $b}
			    keys %{$port_data{$port}->{scale_points}}){
		$ports .= '      "sp'.$sp.'":"' .
		    $port_data{$port}->{scale_points}->{$sp}."\"\n";
	    }
	}
	if(defined($port_data{$port}->{minimum})){
	    $ports .= '      "minimum":"'.$port_data{$port}->{minimum}."\"\n";
	}
	if(defined($port_data{$port}->{maximum})){
	    $ports .= '      "maximum":"'.$port_data{$port}->{maximum}."\"\n";
	}
	if(defined($port_data{$port}->{default})){
	    $ports .= '      "default":"'.$port_data{$port}->{default}."\"\n";
	}
	$ports .= "    },\n";
    }

    # Remove the last comma from $ports
    $ports =~ s/,\s+$/\n/s;

    print $out $ports;
    print $out "  ]\n";
    print $out '},'."\n";
}
print $out "]\n";

	   
